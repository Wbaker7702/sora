export const commands = [
    {
        label: "asset id",
        value: "asset id",
        description: "Get Id of builtin Soroban Asset Contract",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--asset",
            type: "argument",
            placeholder: "<ASSET>",
            description: "ID of the Stellar classic asset to wrap, e.g. 'USDC:G...5'",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "asset deploy",
        value: "asset deploy",
        description: "Deploy builtin Soroban Asset Contract",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--asset",
            type: "argument",
            placeholder: "<ASSET>",
            description: "ID of the Stellar classic asset to wrap, e.g. 'USDC:G...5'",
          },
          {
            name: "--source-account",
            type: "argument",
            placeholder: "<SOURCE_ACCOUNT>",
            description: "Account that signs the final transaction. Can be an identity, a secret key, or a seed phrase",
          },
          {
            name: "--hd-path",
            type: "argument",
            placeholder: "<HD_PATH>",
            description: "If using a seed phrase, which hierarchical deterministic path to use, e.g. m/44'/148'/{hd_path}. Default: 0",
          },
          {
            name: "--fee",
            type: "argument",
            placeholder: "<FEE>",
            description: "Fee amount for transaction, in stroops. 1 stroop = 0.0000001 xlm",
          },
          {
            name: "--cost",
            type: "flag",
            description: "Output the cost execution to stderr",
          },
          {
            name: "--instructions",
            type: "argument",
            placeholder: "<INSTRUCTIONS>",
            description: "Number of instructions to simulate",
          },
          {
            name: "--build-only",
            type: "flag",
            description: "Build the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--sim-only",
            type: "flag",
            description: "(Deprecated) simulate the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "alias add",
        value: "alias add",
        description: "Add contract alias",
        args: [
          {
            name: "ALIAS",
            type: "argument",
            description: "The contract alias that will be used",
          },
        ],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--id",
            type: "argument",
            placeholder: "<CONTRACT_ID>",
            description: "The contract id that will be associated with the alias",
          },
          {
            name: "--overwrite",
            type: "flag",
            description: "Overwrite the contract alias if it already exists",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
        ],
      },
      {
        label: "alias remove",
        value: "alias remove",
        description: "Remove contract alias",
        args: [
          {
            name: "ALIAS",
            type: "argument",
            description: "The contract alias that will be removed",
          },
        ],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
        ],
      },
      {
        label: "alias show",
        value: "alias show",
        description: "Show the contract id associated with a given alias",
        args: [
          {
            name: "ALIAS",
            type: "argument",
            description: "The contract alias that will be displayed",
          },
        ],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
        ],
      },
      {
        label: "alias ls",
        value: "alias ls",
        description: "List all aliases",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "bindings json",
        value: "bindings json",
        description: "Generate Json Bindings",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Path to wasm binary",
          },
        ],
      },
      {
        label: "bindings rust",
        value: "bindings rust",
        description: "Generate Rust bindings",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Path to wasm binary",
          },
        ],
      },
      {
        label: "bindings typescript",
        value: "bindings typescript", 
        description: "Generate a TypeScript / JavaScript package",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Path to optional wasm binary",
          },
          {
            name: "--output-dir",
            type: "argument",
            placeholder: "<OUTPUT_DIR>",
            description: "Where to place generated project",
          },
          {
            name: "--contract-id",
            type: "argument",
            placeholder: "<CONTRACT_ID>",
            description: "The contract ID/address on the network",
          },
          {
            name: "--overwrite",
            type: "flag",
            description: "Whether to overwrite output directory if it already exists",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
        ],
      },
      {
        label: "build",
        value: "build",
        description: "Build a contract from source. Builds all crates that are referenced by the cargo manifest (Cargo.toml) that have cdylib as their crate-type. Crates are built for the wasm32 target. Unless configured otherwise, crates are built with their default features and with their release profile.\n\nIn workspaces builds all crates unless a package name is specified, or the command is executed from the sub-directory of a workspace crate.\n\nTo view the commands that will be executed, without executing them, use the --print-commands-only option.",
        args: [],
        options: [
          {
            name: "--manifest-path",
            type: "argument",
            placeholder: "<MANIFEST_PATH>",
            description: "Path to Cargo.toml",
          },
          {
            name: "--package",
            type: "argument",
            placeholder: "<PACKAGE>",
            description: "Package to build. If omitted, all packages that build for crate-type cdylib are built.",
          },
          {
            name: "--profile",
            type: "argument",
            placeholder: "<PROFILE>",
            description: "Build with the specified profile",
            default: "release",
          },
          {
            name: "--features",
            type: "argument",
            placeholder: "<FEATURES>",
            description: "Build with the list of features activated, space or comma separated",
          },
          {
            name: "--all-features",
            type: "flag",
            description: "Build with the all features activated",
          },
          {
            name: "--no-default-features",
            type: "flag",
            description: "Build with the default feature not activated",
          },
          {
            name: "--out-dir",
            type: "argument",
            placeholder: "<OUT_DIR>",
            description: "Directory to copy wasm files to. If provided, wasm files can be found in the cargo target directory, and the specified directory. If omitted, wasm files are written only to the cargo target directory.",
          },
          {
            name: "--print-commands-only",
            type: "flag",
            description: "Print commands to build without executing them",
          },
          {
            name: "--meta",
            type: "flag",
            description: "Add key-value to contract meta (adds the meta to the contractmetav0 custom section",
          },
        ],
      },
      {
        label: "extend",
        value: "extend",
        description: "Extend the time to live ledger of a contract-data ledger entry. If no keys are specified the contract itself is extended.",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--ledgers-to-extend",
            type: "argument",
            placeholder: "<LEDGERS_TO_EXTEND>",
            description: "Number of ledgers to extend the entries",
          },
          {
            name: "--ttl-ledger-only",
            type: "flag",
            description: "Only print the new Time To Live ledger",
          },
          {
            name: "--id",
            type: "argument",
            placeholder: "<CONTRACT_ID>",
            description: "Contract ID to which owns the data entries. If no keys provided the Contract's instance will be extended",
          },
          {
            name: "--key",
            type: "argument",
            placeholder: "<KEY>",
            description: "Storage key (symbols only)",
          },
          {
            name: "--key-xdr",
            type: "argument",
            placeholder: "<KEY_XDR>",
            description: "Storage key (base64-encoded XDR)",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Path to Wasm file of contract code to extend",
          },
          {
            name: "--wasm-hash",
            type: "argument",
            placeholder: "<WASM_HASH>",
            description: "Path to Wasm file of contract code to extend",
          },
          {
            name: "--durability",
            type: "argument",
            placeholder: "<DURABILITY>",
            description: "Storage entry durability. Possible values: persistent, temporary",
          },
          {
            name: "--source-account",
            type: "argument",
            placeholder: "<SOURCE_ACCOUNT>",
            description: "Account that signs the final transaction. Can be an identity, a secret key, or a seed phrase. Default: `identity generate --default-seed`",
          },
          {
            name: "--hd-path",
            type: "argument",
            placeholder: "<HD_PATH>",
            description: "If using a seed phrase, which hierarchical deterministic path to use, e.g., `m/44'/148'/{hd_path}`. Default: `0`",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--fee",
            type: "argument",
            placeholder: "<FEE>",
            description: "Fee amount for transaction, in stroops. 1 stroop = 0.0000001 xlm",
          },
          {
            name: "--cost",
            type: "flag",
            description: "Output the cost execution to stderr",
          },
          {
            name: "--instructions",
            type: "argument",
            placeholder: "<INSTRUCTIONS>",
            description: "Number of instructions to simulate",
          },
          {
            name: "--build-only",
            type: "flag",
            description: "Build the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--sim-only",
            type: "flag",
            description: "(Deprecated) simulate the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "deploy",
        value: "deploy",
        description: "Deploy a wasm contract",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "WASM file to deploy",
          },
          {
            name: "--wasm-hash",
            type: "argument",
            placeholder: "<WASM_HASH>",
            description: "Hash of the already installed/deployed WASM file",
          },
          {
            name: "--source-account",
            type: "argument",
            placeholder: "<SOURCE_ACCOUNT>",
            description: "Account that signs the final transaction. Can be an identity, a secret key, or a seed phrase. Default: `identity generate --default-seed`",
          },
          {
            name: "--hd-path",
            type: "argument",
            placeholder: "<HD_PATH>",
            description: "If using a seed phrase, which hierarchical deterministic path to use, e.g., `m/44'/148'/{hd_path}`. Default: `0`",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--ignore-checks",
            type: "flag",
            alias: "-i",
            description: "Whether to ignore safety checks when deploying contracts",
          },
          {
            name: "--salt",
            type: "argument",
            placeholder: "<SALT>",
            description: "Custom salt 32-byte salt for the token id",
          },
          {
            name: "--alias",
            type: "argument",
            placeholder: "<ALIAS>",
            description: "The alias that will be used to save the contract's id. Whenever used, --alias will always overwrite the existing contract id configuration without asking for confirmation",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--fee",
            type: "argument",
            placeholder: "<FEE>",
            description: "Fee amount for transaction, in stroops. 1 stroop = 0.0000001 xlm",
          },
          {
            name: "--cost",
            type: "flag",
            description: "Output the cost execution to stderr",
          },
          {
            name: "--instructions",
            type: "argument",
            placeholder: "<INSTRUCTIONS>",
            description: "Number of instructions to simulate",
          },
          {
            name: "--build-only",
            type: "flag",
            description: "Build the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--sim-only",
            type: "flag",
            description: "(Deprecated) simulate the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "fetch",
        value: "fetch",
        description: "Fetch a contract's Wasm binary",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--id",
            type: "argument",
            placeholder: "<CONTRACT_ID>",
            description: "Contract ID to fetch",
          },
          {
            name: "--out-file",
            type: "argument",
            alias: "-o",
            placeholder: "<OUT_FILE>",
            description: "Where to write output otherwise stdout is used",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
        ],
      },
      {
        label: "id asset",
        value: "id asset",
        description: "Deploy builtin Soroban Asset Contract",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--asset",
            type: "argument",
            placeholder: "<ASSET>",
            description: "ID of the Stellar classic asset to wrap, e.g. 'USDC:G...5'",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "id wasm",
        value: "id wasm",
        description: "Deploy normal Wasm Contract",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--salt",
            type: "argument",
            placeholder: "<SALT>",
            description: "ID of the Soroban contract",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--source-account",
            type: "argument",
            placeholder: "<SOURCE_ACCOUNT>",
            description: "Account that signs the final transaction. Can be an identity, a secret key, or a seed phrase",
          },
          {
            name: "--hd-path",
            type: "argument",
            placeholder: "<HD_PATH>",
            description: "If using a seed phrase, which hierarchical deterministic path to use, e.g. m/44'/148'/{hd_path}. Default: 0",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "info interface",
        value: "info interface",
        description: "Output the interface of a contract. A contract's interface describes the functions, parameters, and types that the contract makes accessible to be called.",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Wasm file to extract the data from",
          },
          {
            name: "--wasm-hash",
            type: "argument",
            placeholder: "<WASM_HASH>",
            description: "Wasm hash to get the data for",
          },
          {
            name: "--id",
            type: "argument",
            placeholder: "<CONTRACT_ID>",
            description: "Contract id or contract alias to get the data for",
          },
          {
            name: "--output",
            type: "argument",
            placeholder: "<OUTPUT>",
            description: "Format of the output",
            default: "rust",
            possible_values: ["rust", "xdr-base64", "json", "json-formatted"],
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "info meta",
        value: "info meta",
        description: "Output the metadata stored in a contract. A contract's meta is a series of key-value pairs that the contract developer can set with any values to provided metadata about the contract.",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Wasm file to extract the data from",
          },
          {
            name: "--wasm-hash",
            type: "argument",
            placeholder: "<WASM_HASH>",
            description: "Wasm hash to get the data for",
          },
          {
            name: "--id",
            type: "argument",
            placeholder: "<CONTRACT_ID>",
            description: "Contract id or contract alias to get the data for",
          },
          {
            name: "--output",
            type: "argument",
            placeholder: "<OUTPUT>",
            description: "Format of the output",
            default: "text",
            possible_values: ["text", "xdr-base64", "json", "json-formatted"],
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "info env-meta",
        value: "info env-meta",
        description: "Output the env required metadata stored in a contract. Env-meta is information stored in all contracts, in the contractenvmetav0 WASM custom section, about the environment that the contract was built for.",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Wasm file to extract the data from",
          },
          {
            name: "--wasm-hash",
            type: "argument",
            placeholder: "<WASM_HASH>",
            description: "Wasm hash to get the data for",
          },
          {
            name: "--id",
            type: "argument",
            placeholder: "<CONTRACT_ID>",
            description: "Contract id or contract alias to get the data for",
          },
          {
            name: "--output",
            type: "argument",
            placeholder: "<OUTPUT>",
            description: "Format of the output",
            default: "text",
            possible_values: ["text", "xdr-base64", "json", "json-formatted"],
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "init",
        value: "init",
        description: "Initialize a Soroban project with an example contract",
        args: [
          {
            name: "PROJECT_PATH",
            type: "argument",
            description: "Path where the Soroban project will be initialized",
          },
        ],
        options: [
          {
            name: "--help",
            type: "flag",
            alias: "-h",
            description: "Print help",
          },
          {
            name: "--name",
            type: "argument",
            placeholder: "<NAME>",
            description: "An optional flag to specify a new contract's name.",
            default: "hello-world",
          },
          {
            name: "--with-example",
            type: "argument",
            alias: "-w",
            placeholder: "<WITH_EXAMPLE>...",
            description: "An optional flag to specify Soroban example contracts to include. A hello-world contract will be included by default. Possible values: account, alloc, atomic-multiswap, atomic-swap, auth, cross-contract, custom-types, deep-contract-auth, deployer, errors, events, fuzzing, increment, liquidity-pool, logging, simple-account, single-offer, timelock, token, upgradeable-contract",
          },
          {
            name: "--overwrite",
            type: "flag",
            description: "Overwrite all existing files.",
          },
        ],
      },
      {
        label: "inspect",
        value: "inspect",
        description: "(Deprecated in favor of contract info subcommands) Inspect a WASM file listing contract functions, meta, etc",
        args: [],
        options: [
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Path to wasm binary",
          },
          {
            name: "--output",
            type: "argument",
            placeholder: "<OUTPUT>",
            description: "Output just XDR in base64",
            default: "docs",
            possible_values: [
              "xdr-base64: XDR of array of contract spec entries",
              "xdr-base64-array: Array of xdr of contract spec entries",
              "docs: Pretty print of contract spec entries"
            ],
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--help",
            type: "flag",
            alias: "-h",
            description: "Print help",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "install",
        value: "install",
        description: "Install a WASM file to the ledger without creating a contract instance",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            alias: "-h",
            description: "Print help",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Path to wasm binary",
          },
          {
            name: "--source-account",
            type: "argument",
            placeholder: "<SOURCE_ACCOUNT>",
            description: "Account that where transaction originates from. Can be an identity (--source alice), a public key (--source GDKW...), a muxed account (--source MDA…), a secret key (--source SC36…), or a seed phrase (--source 'kite urban…')",
          },
          {
            name: "--hd-path",
            type: "argument",
            placeholder: "<HD_PATH>",
            description: "If using a seed phrase, which hierarchical deterministic path to use, e.g., m/44'/148'/{hd_path}. Example: --hd-path 1. Default: 0",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--ignore-checks",
            type: "flag",
            alias: "-i",
            description: "Whether to ignore safety checks when deploying contracts",
            default: "false",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--fee",
            type: "argument",
            placeholder: "<FEE>",
            description: "Fee amount for transaction, in stroops. 1 stroop = 0.0000001 xlm",
            default: "100",
          },
          {
            name: "--cost",
            type: "flag",
            description: "Output the cost execution to stderr",
          },
          {
            name: "--instructions",
            type: "argument",
            placeholder: "<INSTRUCTIONS>",
            description: "Number of instructions to simulate",
          },
          {
            name: "--build-only",
            type: "flag",
            description: "Build the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--sim-only",
            type: "flag",
            description: "(Deprecated) simulate the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "invoke",
        value: "invoke",
        description: "Invoke a contract function. Generates an 'implicit CLI' for the specified contract on-the-fly using the contract's schema.",
        args: [
          {
            name: "CONTRACT_FN_AND_ARGS",
            type: "argument",
            description: "Function name as subcommand, then arguments for that function as --arg-name value",
          },
        ],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--id",
            type: "argument",
            placeholder: "<CONTRACT_ID>",
            description: "Contract ID to invoke",
          },
          {
            name: "--is-view",
            type: "flag",
            description: "View the result simulating and do not sign and submit transaction. Deprecated use --send=no",
          },
          {
            name: "--send",
            type: "argument",
            placeholder: "<SEND>",
            description: "Whether or not to send a transaction",
            default: "default",
            possible_values: [
              "default: Send transaction if simulation indicates there are ledger writes, published events, or auth required, otherwise return simulation result",
              "no: Do not send transaction, return simulation result",
              "yes: Always send transaction"
            ],
          },
          {
            name: "--source-account",
            type: "argument",
            placeholder: "<SOURCE_ACCOUNT>",
            description: "Account that signs the final transaction. Can be an identity, a secret key, or a seed phrase. Default: `identity generate --default-seed`",
          },
          {
            name: "--hd-path",
            type: "argument",
            placeholder: "<HD_PATH>",
            description: "If using a seed phrase, which hierarchical deterministic path to use, e.g., `m/44'/148'/{hd_path}`. Default: `0`",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--fee",
            type: "argument",
            placeholder: "<FEE>",
            description: "Fee amount for transaction, in stroops. 1 stroop = 0.0000001 xlm",
            default: "100",
          },
          {
            name: "--cost",
            type: "flag",
            description: "Output the cost execution to stderr",
          },
          {
            name: "--instructions",
            type: "argument",
            placeholder: "<INSTRUCTIONS>",
            description: "Number of instructions to simulate",
          },
          {
            name: "--build-only",
            type: "flag",
            description: "Build the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--sim-only",
            type: "flag",
            description: "(Deprecated) simulate the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "optimize",
        value: "optimize",
        description: "Optimize a WASM file",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            alias: "-h",
            description: "Print help",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Path to wasm binary",
          },
          {
            name: "--wasm-out",
            type: "argument",
            placeholder: "<WASM_OUT>",
            description: "Path to write the optimized WASM file to (defaults to same location as --wasm with .optimized.wasm suffix)",
          },
        ],
      },
      {
        label: "read",
        value: "read",
        description: "Print the current value of a contract-data ledger entry",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            alias: "-h",
            description: "Print help",
          },
          {
            name: "--output",
            type: "argument",
            placeholder: "<OUTPUT>",
            description: "Type of output to generate",
            default: "string",
            possible_values: ["string", "json", "xdr"],
          },
          {
            name: "--id",
            type: "argument",
            placeholder: "<CONTRACT_ID>",
            description: "Contract ID to which owns the data entries. If no keys provided the Contract's instance will be extended",
          },
          {
            name: "--key",
            type: "argument",
            placeholder: "<KEY>",
            description: "Storage key (symbols only)",
          },
          {
            name: "--key-xdr",
            type: "argument",
            placeholder: "<KEY_XDR>",
            description: "Storage key (base64-encoded XDR)",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Path to Wasm file of contract code to extend",
          },
          {
            name: "--wasm-hash",
            type: "argument",
            placeholder: "<WASM_HASH>",
            description: "Path to Wasm file of contract code to extend",
          },
          {
            name: "--durability",
            type: "argument",
            placeholder: "<DURABILITY>",
            description: "Storage entry durability. Possible values: persistent, temporary",
            default: "persistent",
          },
          {
            name: "--source-account",
            type: "argument",
            placeholder: "<SOURCE_ACCOUNT>",
            description: "Account that signs the final transaction. Can be an identity, a secret key, or a seed phrase. Default: `identity generate --default-seed`",
          },
          {
            name: "--hd-path",
            type: "argument",
            placeholder: "<HD_PATH>",
            description: "If using a seed phrase, which hierarchical deterministic path to use, e.g., `m/44'/148'/{hd_path}`. Default: `0`",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      },
      {
        label: "restore",
        value: "restore",
        description: "Restore an evicted value for a contract-data legder entry. If no keys are specified the contract itself is restored.",
        args: [],
        options: [
          {
            name: "--help",
            type: "flag",
            description: "Print help",
          },
          {
            name: "--id",
            type: "argument",
            placeholder: "<CONTRACT_ID>",
            description: "Contract ID to which owns the data entries. If no keys provided the Contract's instance will be extended",
          },
          {
            name: "--key",
            type: "argument",
            placeholder: "<KEY>",
            description: "Storage key (symbols only)",
          },
          {
            name: "--key-xdr",
            type: "argument",
            placeholder: "<KEY_XDR>",
            description: "Storage key (base64-encoded XDR)",
          },
          {
            name: "--wasm",
            type: "argument",
            placeholder: "<WASM>",
            description: "Path to Wasm file of contract code to extend",
          },
          {
            name: "--wasm-hash",
            type: "argument",
            placeholder: "<WASM_HASH>",
            description: "Path to Wasm file of contract code to extend",
          },
          {
            name: "--durability",
            type: "argument",
            placeholder: "<DURABILITY>",
            description: "Storage entry durability. Possible values: persistent, temporary",
            default: "persistent",
          },
          {
            name: "--ledgers-to-extend",
            type: "argument",
            placeholder: "<LEDGERS_TO_EXTEND>",
            description: "Number of ledgers to extend the entry",
          },
          {
            name: "--ttl-ledger-only",
            type: "flag",
            description: "Only print the new Time To Live ledger",
          },
          {
            name: "--source-account",
            type: "argument",
            placeholder: "<SOURCE_ACCOUNT>",
            description: "Account that signs the final transaction. Can be an identity, a secret key, or a seed phrase. Default: `identity generate --default-seed`",
          },
          {
            name: "--hd-path",
            type: "argument",
            placeholder: "<HD_PATH>",
            description: "If using a seed phrase, which hierarchical deterministic path to use, e.g., `m/44'/148'/{hd_path}`. Default: `0`",
          },
          {
            name: "--global",
            type: "flag",
            description: "Use global config",
          },
          {
            name: "--rpc-url",
            type: "argument",
            placeholder: "<RPC_URL>",
            description: "RPC server endpoint",
          },
          {
            name: "--rpc-header",
            type: "argument",
            placeholder: "<RPC_HEADERS>",
            description: "RPC Header(s) to include in requests to the RPC provider",
          },
          {
            name: "--network-passphrase",
            type: "argument",
            placeholder: "<NETWORK_PASSPHRASE>",
            description: "Network passphrase to sign the transaction sent to the rpc server",
          },
          {
            name: "--network",
            type: "argument",
            placeholder: "<NETWORK>",
            description: "Name of network to use from config",
          },
          {
            name: "--fee",
            type: "argument",
            placeholder: "<FEE>",
            description: "Fee amount for transaction, in stroops. 1 stroop = 0.0000001 xlm",
            default: "100",
          },
          {
            name: "--cost",
            type: "flag",
            description: "Output the cost execution to stderr",
          },
          {
            name: "--instructions",
            type: "argument",
            placeholder: "<INSTRUCTIONS>",
            description: "Number of instructions to simulate",
          },
          {
            name: "--build-only",
            type: "flag",
            description: "Build the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--sim-only",
            type: "flag",
            description: "(Deprecated) simulate the transaction and only write the base64 xdr to stdout",
          },
          {
            name: "--config-dir",
            type: "argument",
            placeholder: "<CONFIG_DIR>",
            description: "Location of config directory, default is '.'",
          },
        ],
      }
]